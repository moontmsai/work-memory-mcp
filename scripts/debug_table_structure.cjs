// work_sessions ÌÖåÏù¥Î∏î ÏÉÅÏÑ∏ Íµ¨Ï°∞ ÌôïÏù∏
const Database = require('better-sqlite3');
const path = require('path');

const dbPath = path.join(__dirname, '..', 'work_memory', 'database.sqlite');

try {
  const db = new Database(dbPath);
  
  console.log('üîç work_sessions ÌÖåÏù¥Î∏î ÏÉÅÏÑ∏ Î∂ÑÏÑù');
  console.log('='.repeat(50));
  
  // ÌÖåÏù¥Î∏î Ï†ïÎ≥¥ ÏÉÅÏÑ∏ ÌôïÏù∏
  const tableInfo = db.prepare("PRAGMA table_info(work_sessions)").all();
  console.log(`\nüìä Ï¥ù Ïª¨Îüº Ïàò: ${tableInfo.length}Í∞ú\n`);
  
  tableInfo.forEach((col, index) => {
    console.log(`${index + 1}. ${col.name}`);
    console.log(`   ÌÉÄÏûÖ: ${col.type}`);
    console.log(`   NULL ÌóàÏö©: ${col.notnull ? 'NO' : 'YES'}`);
    console.log(`   Í∏∞Î≥∏Í∞í: ${col.dflt_value || 'NULL'}`);
    console.log(`   PRIMARY KEY: ${col.pk ? 'YES' : 'NO'}`);
    console.log('');
  });
  
  // project_normalized Ïª¨Îüº ÌäπÎ≥Ñ ÌôïÏù∏
  const projectNormalizedCol = tableInfo.find(col => col.name === 'project_normalized');
  
  if (projectNormalizedCol) {
    console.log('‚úÖ project_normalized Ïª¨Îüº Î∞úÍ≤¨!');
    console.log(`   Ïù∏Îç±Ïä§: ${tableInfo.indexOf(projectNormalizedCol) + 1}`);
    console.log(`   ÏÑ∏Î∂ÄÏ†ïÎ≥¥: ${JSON.stringify(projectNormalizedCol, null, 2)}`);
  } else {
    console.log('‚ùå project_normalized Ïª¨ÎüºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå');
  }
  
  // Ïª¨ÎüºÎ™Ö Ï†ïÌôïÌûà ÎÇòÏó¥
  const columnNames = tableInfo.map(col => col.name);
  console.log('\nüìù Î™®Îì† Ïª¨ÎüºÎ™Ö:');
  columnNames.forEach((name, index) => {
    console.log(`  ${index + 1}. "${name}"`);
  });
  
  // projectÎ°ú ÏãúÏûëÌïòÎäî Ïª¨ÎüºÎì§ Ï∞æÍ∏∞
  const projectColumns = columnNames.filter(name => name.toLowerCase().includes('project'));
  console.log('\nüéØ project Í¥ÄÎ†® Ïª¨ÎüºÎì§:');
  projectColumns.forEach(name => {
    console.log(`  - "${name}"`);
  });
  
  db.close();
  
} catch (error) {
  console.error('‚ùå Ïò§Î•ò:', error);
}
